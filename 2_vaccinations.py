# File for the vaccinations
import pandas as pd
import sqlalchemy
from sql_connection_complete import connection_string
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

st.set_page_config (page_title = 'Recommended vaccines', page_icon = 'ðŸ’‰')
st.title ('Recommended vaccines')
st.subheader('With data from the Paul-Ehrlich-Institut')
st.markdown(
    '''
    This page is dedicated to tables. By using data from the [Paul-Ehrlich-Institut](https://www.pei.de/DE/home/home-node.html) we have created a table that lists the recommended vaccinations in different countriess depending on your group.
    Even if the table is generated by [streamlit](https://streamlit.io/), we can not forget that Data Frames from [pandas](https://pandas.pydata.org/) were crucial in this task. We also implemented web-scrapping by either getting APIs, for example this one from [the Global Health Observatory](https://www.who.int/data/gho/info/gho-odata-api) or with HTML parser like [Beautiful Soup](https://en.wikipedia.org/wiki/Beautiful_Soup_(HTML_parser))
    
    Have you noticed how all this information is somehow related? Even if it gets big, by implementig efficient data engineering in our tables from the [MySQL](https://www.mysql.com/) database, we can acces all this information for our different pages.    
    
    **ðŸ‘ˆ Select a group and a country to start** 
    ''')
def fetch_data_vaccines(country, group):
    query = f"""
            SELECT
                countries.country_name,
                countries.country_code,
                vaccines_schedules.vaccine_target_population,
                vaccines.vaccine_id,
                vaccines.vaccine_description
            FROM
                vaccines_schedules
            JOIN
                countries ON vaccines_schedules.country_id = countries.country_id
            JOIN
                vaccines ON vaccines_schedules.vaccine_id = vaccines.vaccine_id
            WHERE
                countries.country_name = '{country}'
                AND
                vaccines_schedules.vaccine_target_population = '{group}'
            """
    queried_data_vaccines = pd.read_sql(query, con = connection_string)
    queried_data_vaccines['Type of vaccine'] = queried_data_vaccines['vaccine_description']
    return queried_data_vaccines

# Create a dictionary with the needed data for the user
data_sql = {'countries': pd.read_sql('SELECT DISTINCT country_name FROM countries', con = connection_string)['country_name'].tolist(),
           'diseases': pd.read_sql('SELECT DISTINCT disease_name FROM diseases', con = connection_string)['disease_name'].tolist(),
           'years': pd.read_sql('SELECT DISTINCT disease_stat_year FROM diseases_stats_per_countries', con = connection_string)['disease_stat_year'].tolist(),
           'groups': pd.read_sql('SELECT DISTINCT vaccine_target_population FROM vaccines_schedules', con = connection_string)['vaccine_target_population'].tolist()}

# Ask the user to select a country and group
country = st.sidebar.selectbox('Choose a country', data_sql['countries'])
group = st.sidebar.selectbox('Choose your group', data_sql['groups'])

# Use the data
data_vaccines = fetch_data_vaccines(country, group)

if not data_vaccines.empty:
    st.table(data_vaccines['Type of vaccine'])
else:
    st.write('No available data for the selected group or country')